
 find_library(STD_LIB_STATIC_FILE libc++ REQUIRED NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH NO_SYSTEM_ENVIRONMENT_PATH NO_CMAKE_SYSTEM_PATH NO_CMAKE_INSTALL_PREFIX NO_CMAKE_FIND_ROOT_PATH)
 find_library(STD_LIB_SHARED_IMPLIB_FILE c++ REQUIRED NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH NO_SYSTEM_ENVIRONMENT_PATH NO_CMAKE_SYSTEM_PATH NO_CMAKE_INSTALL_PREFIX NO_CMAKE_FIND_ROOT_PATH)

 find_file(STD_LIB_SHARED_FILE c++.dll HINTS ${LibCxx_ROOT} PATH_SUFFIXES bin/ REQUIRED NO_DEFAULT_PATH)

 find_file(_LIBCXX_INCLUDES_FILE
             NAMES limits
             PREFIX c++/v1
             NO_CMAKE_PATH NO_CMAKE_ENVIRONMENT_PATH NO_SYSTEM_ENVIRONMENT_PATH NO_CMAKE_SYSTEM_PATH NO_CMAKE_INSTALL_PREFIX NO_CMAKE_FIND_ROOT_PATH
          )

cmake_path(GET _LIBCXX_INCLUDES_FILE PARENT_PATH _LIBCXX_INCLUDES_DIR)

add_library(LibCxx STATIC IMPORTED GLOBAL)

target_include_directories(LibCxx SYSTEM BEFORE INTERFACE ${_LIBCXX_INCLUDES_FILE})
target_include_directories(LibCxx SYSTEM INTERFACE ${LibCxx_ROOT}/lib/clang/19/include)
target_compile_options(LibCxx INTERFACE /clang:-nobuiltininc)

add_library(Cxx SHARED IMPORTED GLOBAL)

target_include_directories(Cxx SYSTEM BEFORE INTERFACE ${_LIBCXX_INCLUDES_FILE})
target_include_directories(Cxx SYSTEM INTERFACE ${LibCxx_ROOT}/lib/clang/19/include)
target_compile_options(Cxx INTERFACE /clang:-nobuiltininc)

if(CMAKE_CONFIGURATION_TYPES)
 #set_target_properties(MicrosoftStl_static PROPERTIES IMPORTED_LOCATION_Debug "${STD_LIB_FILE_Debug}")
else()
 set_target_properties(LibCxx PROPERTIES IMPORTED_LOCATION_${CMAKE_BUILD_TYPE} ${STD_LIB_STATIC_FILE})

 set_target_properties(Cxx PROPERTIES IMPORTED_LOCATION_${CMAKE_BUILD_TYPE} ${STD_LIB_SHARED_FILE})
 set_target_properties(Cxx PROPERTIES IMPORTED_IMPLIB ${STD_LIB_SHARED_IMPLIB_FILE})
 set_target_properties(Cxx PROPERTIES IMPORTED_IMPLIB_${CMAKE_BUILD_TYPE} ${STD_LIB_SHARED_IMPLIB_FILE})
endif()

if(_LIBCXX_INCLUDES_FILE AND STD_LIB_STATIC_FILE AND STD_LIB_SHARED_FILE AND STD_LIB_SHARED_IMPLIB_FILE)
  set(LibCxx_FOUND TRUE)
else()
  set(LibCxx_FOUND FALSE)
endif()
